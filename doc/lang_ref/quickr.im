.if pfm
	.** .pa
	&page_if_needed
	&set1col
	.in 0i
.fi 

.dv row    .tr r=5 ^: .bc start $1 .bc end .cl ^: $2 .cl ^: $3  
.dv row1    .tr b=1 l=2 r=5 ^: .bc start $1 .bc end .cl ^: $2 .cl ^: $3  

.pa
.pn 0 on t=B-%d f=B-%d center noline



.h1 Appendix B -- Quick Reference
The following tables provide a quick overview of the &x commands and the parameters that 
they accept. Several conventions used in the tables are described below:
.sp
&indent
.ll -.5i
.bd 1i &ditext
.di {x|y} : One of the options separated by vertical bars, and enclosed inside of curly
braces, must be supplied.
.sp .5
.di ^[...] : The parameter appearing between square braces is optional and does not need to 
be supplied.
.sp .5
.di <text> : One or more text tokens are expected. Tokens are assumed to be a part of 
<text> until a newline character is encountered.
.sp .5
.di <n> : A numerical value is expected with its units being specific to the command
(i.e. lines for the &c(cc) command).
.sp .5
.di <points> : A numerical value is expected and is treated as points. 
.sp .5
.di <dist> : A numerical value is expected and its units are assumed to be determined
by an appended 'c,' 'p' or 'i' indicating centimeters, points or inches respectfully. 
For vertical distances, a suffix of 'l' (lower case L) can be used to indicate number of lines.
.sp .5
.di <rdist> : Same as for <dist> except that the value may be prefixed with either a plus or minus (+ or -) sign
to change the distance relative to the current setting.
.sp .5
.ed
.ll +.5i
&uindent
.sp

.if false
.cn start atbot Times-Roman 8p 1i
This is a test of the cn after a table
.cn end
.fi 

.** -------------------------------------------------------------------------------------------
.ju off
.st [ &textsize 2 -]
.** compute length of last table colum (margin vars come back as points)
.gv lmar
.gv rmar
.dv ll [ &_rmar &_lmar - ]
.dv comment_len [ &ll 2 72 * - ]

.ta b=0 .5i 1.5i &{comment_len}p

.th .bc start CMD .bc end .cl ^: .bc start PARAMETER(S) .bc end .cl ^: .bc start COMMENTS .bc end 
&row1(**:<text>:Comment; all tokens to the next newline are ignored)
&row(ab::Abort processing; no end of document housekeeping performed.)
&row(ai::All input until the next ^.fo command is written to the output file as is (see &cmd(nf) .sm ) )
&row(br::Cause the next formatted text token to be placed at the beginning of a new line)

&row(ca:[expand] [shift] {start|extend <file> .br end:Capture all lines until the end command and place into the file. Extend appends the source to the file. Shift shifts the left most space character before adding the source to the file.)
&row(cb::Column begin (eject column))
&row(cc:<n>:Conditional column. Eject column if n rows do not remain in current column)
&row(cd:<num> .br w=<dist> .br ^[g=<distance>] .br ^[i=<distance>]:Define num columns .br width of each .br gutter between columns .br Indention of left column from left margin)
&row(ce:<text>:Center text on next line)

.tr r=8L
.bc start cl .bc end
.cl
.sp 1
[c=bgcolour] .br 
[a=alignval] .br 
[s=span] .br
[v=valignvalue] .br
.cl
Start next cell in the table
.br Set background colour (HTML only)
.br Set alignment type (HTML only)
.br Set the number of 'real' columns to span
.br Vertical alignment option (HTML only)

&row(cp:<n>:Conditional page eject. Start new page if n columns are not left on current page)

.tr r=17L
.bc start dh .bc end 
.cl
<level>
.br [f=<fontname>]
.br [p=<points>]
.br [s=<skip>]
.br [i=<chars>]
.br [u={on|off}]
.br [t={on|off]
.br [m=<dist>]
.br [e={page|col|none}]
.cl
.br Define header properties for header level  <level>.
.br Font to use for the header
.br Size of header text
.br Skip is two line values where 21 is skip 2 before and 1 after the header
.br Number of characters to indent the first line of text after the header
.br Translate header to upper case
.br Include the header in the table of contents
.br Header margin from left edge of column
.br Eject type.

&row(di:<tokens>: Start a new definition list entry with <tokens>)
&row(ds::Double space mode on)
&row(dv:<var-name> <tokens>:Defines <tokens> to the variable <var-name>)

&row(ei::Begins else clause in an if-else conditional)
&row(ed::Ends a definition list)

.tr
.bc start ep .bc end 
.cl
.sp
.br [l=<dist>] 
.br [x=<dist>
.br [center| .br close | .br stretch | .br proportional]
.cl
    Include an encapsulated PostScript file.
.br Distance along the Y axis to reserve
.br Distance to shift X from the left margin
.br Centers drawing between margins
.br Releases unused space reserved by l=<dist>
.br Attempt to use all of reserved space by changing height/width ratio
.br Stretch, but keep drawing proportional with original height/width

&row(et::End table command)

&row(fg:nosect:Sets figure numbering to discard section when paragraph numbering is enabled)

.tr
.bc start fg .bc end 
.cl
.sp
.br [s=<size>] 
.br [f=<font>
.br [p=<prefix>
.br [t=table] 
.br [x=center]
.br [x=noop]
.br [x=reset]
.br <text>
.cl
    Add figure text
.br Hard set size for text (default current size-2p)
.br Font for text
.br Sets a prefix string to place before each figure number
.br Uses table label and number rather than figure
.br Centers the text string
.br Does not expect text (allow prefix, reset alone)
.br Resets the figure and table number to 1
.br Text to insert


&row(fi::End if/else)

.tr r=7
.bc start fm .bc end
.cl
.sp 1
[i=dist]
.br [l=dist]
.br [w=dist] 
.br [y=pts] 
.cl
Floating margin .br
indent distance from left margin for temporary margin. .br
length before returning margins to normal (if y= not set). .br
width of line (forces right margin to be pulled in if needed.) .br
Pts from top of page where normal margins are to resume.


&row(gv::Get value is described at end due to the number of parameters.)

&row(h_:<text>:Generate a header where '_' is replaced with a 1, 2, 3, or 4)
&row(hn:on | off | n:Turn off or on header numbering. If n is supplied, sets number to n)

&row(if:<expression>:Causes next lines of source to be 'executed' if <expression> is true)
&row(im:[nf] <filename>:Causes <filename> to be read and process as if it were included at the location of the imbed command in the file currently being processed if 'nf' given as first token, no format flag is enabled as though it appears as the first command in the file)
&row(in:<rdist>:Sets the distance text is placed from the left column edge)

&row(jm:<target>:Searches for the target token skipping all text and commands until it reaches the target)

&row(li::Insert a line break and place a bullet character before writing the next formatted text token)
&row(ll:<rdist>:Set the line length inside the column)
&row(ln:[a=<rdist>] [l=<rdist>] [r=<rdist>]:Flush and add a solid line. Options specify the space after the line before the next text is inserted, and the left and right margins.)
&row(ls:<points>:Line spacing, space between lines, to <points>)
&row(lw:<points>:Set the size of lines drawn with the line command)
&row(nf::Cause the all lines of source, until a format command, to be placed into the document without formatting)

&row(nl::Force a newline in the output file (generally has no effect on the document appearance))

&row(oe:^[all] [nostate] {page | col} <cmd>:Causes <cmd> to be executed on the next page or column eject. If 'all' supplied then for every eject.) If nostate is given, then state is not saved/restored before and after command.

&row(pa::Causes the next formatted text token to be placed at the top of the next page)

.tr r=8L
.bc start pn .bc end
.cl
{off | on <n>} .br
[f=fmt-str] .br
[t=fmt-str] .br
[center] .br
[noline] .br
[roman] .br
.cl
Set page numbering on or off. If n given starts numbering at n+1 .br
Supply the format for the page number: e.g.-%d- or A-%d .br
Supply the format for the page number in the table of contents .br
Center the page number rather than placing it against the margin .br
Do not write a line between the text area and the page number .br
Causes page number to be generated as roman numerals

&row(qu::Cause &x to stop reading input and gracefully terminate the document)

&row(rf:<text>:Use <text> as the running footer string)
&row(rh:<text>:Use <text> as the running header string)
&row(rs:<points>:Set the runing header/footer size to <points>)

&row(sm::Smash -- prevent whitespace between previous and next tokens.)
&row(sp:<n>:Generate 'n' number of blank lines. N may be a decimal (e.g. .5) )
&row(ss::Turn single spaceing between lines on. (see &cmd(ds) .sm ) )
&row(sv:<name>:Show the value of the named variable on the standard error device)
&row(sx:<points>:Set x position to 'n'  (pfm only) )
&row(sy:<points>:Set y position to 'n' (pfm only) )

.tr r=8L
.bc start ta .bc end
.cl
c1 c2...cn .br
[B] .br
[b=n] .br
[center] .br
[n] .br
[w=pct] .br
[c=#hhhhhh] .br
[p=<points>]
.cl
Start table c1, c2... are column width definitions (e.g. 1i 3i) .br
Enable edge boarders .br
Place borders on the table when n is 1; borders off if n is 0 .br
Center table on page .br
Do not automatically generate first tr command .br
Width as a percentage of screen size (hfm only) .br
Colour for background of cell/row .br
Padding of text from cell boundaries .br

&row(tg:<dist>:Set the top gutter (space up from the top margin that running header is placed.) )
&row(th:<text>:Define table header text/commands )
&row(tm:<dist>:Set the top margin)

.tr r=10L
.bc start tr .bc end
.cl
.sp 1
[n] .br 
[b=n] .br
[c=bgcolour] .br 
[a=alignval] .br 
[l=n] .br
[m=n] .br
[r=<dist>] .br
[v=valignvalue]
[w=n] 
.cl
Start next row in the table.
.br Don't automatically start column
.br Turn borders on if n is 1
.br Set background colour (HTML only)
.br Set alignment type (HTML only)
.br set number of lines drawn before next row (pfm only)
.br Cause n horizontal lines to be written following the row (pfm only)
.br Require vertical space break page if not available.
.br Vertical alignment option (HTML only)
.br Set the line weight to n (pfm only)


&row(xx:<level>:Set trace to <level> where level should be 0-3. 0 is off. Trace information is written to the standard error device.)

.tr r=27L
.bc start gv .bc end
.cl
.sp
.br { Date |
.br date |
.br Edate |
.br env <ename> <xname> |
.br figure |
.br Figure |
.br font |
.br host |
.br idate | 
.br lines |
.br lmar |
.br page |
.br remain |
.br rmar |
.br sect | 
.br table |
.br Table |
.br tsize |
.br Time |
.br ver |
.br words |
.br yval }
.cl
    Get the named value into a variable
.br Set &ital(_date) to format dd <month> yyyy
.br Set &ital(_date) using format mm/dd/yyyy
.br Set &ital(_date) using Eurpoean format dd/mm/yyyy
.br Set &ital(xname) to value that environment variable &ital(ename) has
.br Set &ital(_fig) to figure number of next figure
.br Set &ital(_fig) to figure number of next figure and increase the number.
.br Set &ital(_font) to the current font
.br Set &ital(_host) to the host name (UNIX only)
.br Set &ital(_date) using ISO extended format yyyy-mm-dd
.br Set &ital(_lines) to the number of lines remaining in the current column
.br Set &ital(_lmar) to the current left margin value (points)
.br Set &ital(_page) to the current page number
.br Set &ital(_{i|p|l|=}remain) to the value of the remaining space in column
.br Set &ital(_rmar) to the value of the right margin 
.br Set &ital(_sect) to the current section number
.br Set &ital(_table) to the next table number
.br Set &ital(_table) to the next table number and increase the number
.br Set &ital(_tsize) to the current text size value
.br Set &ital(_time) to the current time (hh:mm)
.br Set &ital(_ver) to the current pfm|hfm|tfm version number
.br Set &ital(_words) to the current number of words which have been processed
.br Set &ital(_cury) to the current Y position in the column (points)

.et
.st &textsize
