
.** sample doc which demonstrates two pass formatting in order to best deal with future figure, section and page numbers

.**
.** the colum is used for the rh/rf lines and page number centering. 6.5i indented 1 inch
.** centers it nicely.  Using a line length of 6 inches, with a line indent of .25i centers
.** the 6 inch text lines nicely between the column controlled stuff.
.cd 1 6.5i i=1i
.ll 6i
.in .25i
.pn on 0 f=-%d- center

.** set up headers. no eject for h1, margin set to match the indent value (above, .25i)
.** and no paragraph text indent (i=0).   Font and point sizes for each level set as desired.
.dh 1 e=no m=.25i i=0i s=2,1 	p=12 f=Helvetica-bold
.dh 2      m=.25i i=0i s=1,.5	p=12 f=Helvetica-bold
.dh 3      m=.25i i=0i s=1,0	p=10 f=Helvetica-bold
.hn on

.if pfm
	.dv super .sm .tf superscript 2/3 $1 :
.ei
	.dv super .sm ^^^[$1]
.fi

.ju on
.lw 0
.dv example_start .sp 0.5  .st ^[ ^&textsize 2 - ]  .sf ^&cwfont .nf
.dv example_end .fo on .st ^&textsize .sf ^&textfont .sp 0.5  .sp 1
.dv sm_example_start .sp 0.5  .st ^[ ^&textsize 2 - ]  .sf ^&cwfont .nf
.dv sm_example_end .fo on .st ^&textsize .sf ^&textfont .sp 0.5

.dv figsize [ ^&textsize 2 - ]
.dv figfont Times-roman
.** turn formatting back on, set font and size back to normal, then add figure text capturing fig num as var $2
.dv example_end_fg .fo on .st ^&textsize .sf ^&textfont .sp 0.5 .bc start .fg v=$2 $1 ^: .bc end .sp 1

.dv difont Helvetic-bold
.dv ital .tf Times-oblique ^&textsize $1
.dv bold .tf Times-bold ^&textsize $1
.dv stress .tf Times-bold ^&textsize $1
.dv stress .tf Courier ^&cwsize $1
.dv cwfont Courier
.dv textfont Times-Roman
.dv textsize 10p
.dv cwsize 80
.dv indent .ll -.5i .in +.5i
.dv uindent .in -.5i .ll +.5i

.** if this is the second pass, then imbed the setup variables we captured during first pass
.gv e XFM_PASS cur_pass
.if &cur_pass 2 =
	.im setup.ca
.ei
	.** ensure the file is truncated (all other use will be with extend)
	.ca start setup.ca
.ca end
.fi

.sf &textfont
.st &textsize

.** ------------------------------------------------------------------------------------

.h1 Sample Two Pass Formatting
This document source is intended to be formatted twice.  
The first pass is used to capture the location of various figures (figure number)
as well as section and page numbers of interesting items.
The second pass reads the information generated during pass 1, and inserts (expands 
the variables correctly) into the final document. 
Both passes are made with the same {X}fm component with the output from the first being
sent to the bit bucket as the only &ital( artifact ) from pass one that is desired is
the file &cw( setup.ca. )
The commands would be similar to the following:

&example_start
  XFM_PASS=1 pfm two_pass.xfm /dev/null
  XFM_PASS=2 pfm two_pass.xfm two_pass.ps
&example_end_fg( Command lines to process this document with two passes. :cmd_line_fig)

For most documents there is no need to use two passes to format the document, however two 
specific cases do require a second pass:
.sp .5
&indent
.bl l
.li When a table of contents is to be inserted
.sp .3
.li When future figure, section, or page number references are needed.
.el
&uindent
.sp

This example expicitly tests the capture command's ability to achieve the use of 
future references for page, sections and figure numbers.


.h2 Forward Referencing
In a normal document, we might reference some concept briefly in an introduction or 
related section, but defer any details of the concept until later in the document. 
It is generally nice to provide, at the time of the iniital reference, a forward 
reference to the section where the detailed explanation begins by providing the 
reader with the section number and/or page number where the details might be found.  

.sp
.gv sect
.dv earlier_sect &_sect
So, here we introduce the concept of &ital( foo, ) and we'll inform you that the details
of &ital( foo ) can be found in section &foo_sect which begins on page &foo_page.

.sp
Looking at the source for this document, the page and section numbers which appear
in the previous paragraph are inserted using the variables ^&foo_sect and ^&foo_page, 
however neither of those to variables are defined before their use, yet they appear
correctly in the text. 
This is achieved by capturing the current section and page during the first pass
and placing it into a capture file which was imbedded at the start of this 
document during the second pass. 
The following illustrates the {X}fm code which is used to imbed the captured variables
during the second pass, and to reset the capture file during the first pass.

&example_start
  .gv e XFM_PASS cur_pass
  .if &cur_pass 2 =
    .im setup.ca
  .ei
    .** ensure the file is truncated (all other use will be with extend)
    .ca start setup.ca
  .ca end
  .fi
&example_end_fg( {X}fm code to imbed the forward references during pass 2. :imbed_fig)

Note that the ending capture command &bold( must ) be placed in column zero (0)
(this is not a typo).
.sp

The code gets the current environment variable &cw( XFM_PASS ) set on the command line
and when it has the value of 2, the setup capture file is imbedded. 
When the pass is not 2, the capture file is cleared.


.h2 The Ordering Of Figures
With the on-eject command (^.oe) it is possible that figure ordering is not known at the 
time that the document source is created.  
For example, a figure might require 3 inches of space in the document and thus be &ital( pushed )
to the next page, allowing a subsequently defined figure to be placed ahead of it, and with the 
lower figure number, making it impossible to reference the figure in advance. 

.sp
To demonstrate, two figures are defined in the source following this text. 
The first figure supplied in the source, which is ultimately rendered as figure &long_ex_fig, 
is set up to require more space than remains on the current page and thus is 
forced to the next page, while the second figure, figure &short_ex_fig, is allowed to appear on the current page
and thus earlier, but in reverse order from their definition in the source.  

.** first capture the figure contents into it's own file. the shift parameter is needed
.** to allow the embedded capture command. When the file is finally included, the
.** example_end_fig macro will set the variable long_ex_fig with the correct 
.** figure number.
.ca shift start long_ex.ca
	&example_start
      This is some figure that we forced to appear on the next page.
      It was defined before the previous figure.
	&example_end_fg( This figure was defined first.:long_ex_fig)
.ca end
.gv remain
.if &_iremain < 99
	.** this should always be taken as we are trying to force the figure to next page
	.oe page .im long_ex.ca
.ei
	.im long_ex.ca
.fi

&example_start
  This is the small example allowed to appear first and thus
  will receive the earlier figure number
&example_end_fg(The 'smaller' example.:short_ex_fig)

.sp
How is this accomplished?  
First, the long figure contents are captured into its own capture file. 
The current amount of space remaining on the page is checked, and if less than 
what we feel is required for the example, then an on eject command is issued to 
imbed the capture file at the next page eject; otherwise the capture file is 
immediately embedded.
So far, this is the normal processing for &ital( floating ) a figure to the next 
page or column based on space. 

.sp
The difference is that when the figure command (^.fg)  is actually executed, 
the &cw(v=name) option is used causing the figure number to be defined as the 
variable for the name given.  
Then, at the end of the document source, the needed figure variable names are
written to the capture file (setup.ca) which will be read during pass two, and 
used to define the variables before they are needed and the exact ordering 
does not need to be known.

.sp
A similar technique was used for the small example; in a real document it too 
would probably have been checked for remaining space, but for this example that 
check was omitted.
The previously mentioned concept of &ital( foo ) is actually our illustration of 
the {X}fm code needed to make this happen and it appears in section &foo_sect.

.h2 The Realisation Of Foo
.** capture section and page in the setup file
.gv section
.gv page
.ca expand extend setup.ca
	.dv foo_sect &_sect
	.dv foo_page &_page
.ca end
Here, finally is the alluded to section which details foo.  
In this case, foo is the what was needed to capture the figure number for the &ital( larger )
example when it was pushed after the smaller example.  
(In this case the larger example wasn't all that large, but was forced to be presented in the document
after the smaller example.)

.sp
The crux of the figure code is shown in figure &crux_fig. 
It executes  a get value (.gv) command, and then uses  a capture command to add the value
to the setup capture file. 
This is done as "a part of" the figure; i.e. at the time that the code which presents the figure 
is actually parsed by {X}fm. 

&example_start
  .ca expand extend setup.ca
    .dv long_ex_fig &long_ex_fig
  .ca end
&example_end_fg( Code which sets the figure variable in the setup capture file.:crux_fig)


There are two important aspects about this small snipit of code. 
First, the variable name (long_ex_fig) is defined as a part of the figure 
command:

&example_start
  .fg  v=long_ex_fig  This figure was defined first.
&example_end_fg( The code which generates the figure and captures the variable name:none)

Adding the &cw(v=) option to the figure command causes {X}fm to capture the figure number
and define it as the value to the named varible.
In this case it was assigned to &cw( long_ex_fig. )

.sp
The second important aspect is the actual expansion of the variable and value 
as a define variable command (.dv) which is placed into the setup.ca file. 
The parametrs on the capture command are:
.sp .5
&indent
.bd .75i &difont
	.di expand : Cause variables on the lines placed into the capture file to be 
		expanded as they are placed in rather than the usual behaviour which is to 
		expand them as the capture file is included.
	.sp .5
	.di extend : Causes the capture data to be appended to the named file rather than
		truncating and completely rewriting the file.
.ed
&uindent

.h2 Section and Page References
This section was referenced back in section &earlier_sect. 
To do this we used a variable ^&foo_sect which was defined with the following code, and captured in the setup file, 
when this section was finally started in the source:

&example_start
  .h2 The Realisation Of Foo
  .gv section
  .gv page
  .ca expand extend setup.ca
    .dv foo_sect &_sect
    .dv foo_page &_page
  .ca end
&example_end_fg( Setting the section value of a future section.:unnamed)

.h2 Conclusion
It probably would be nice if {X}fm had a two pass command line option, but including a second command in a 
mkfile seems to be a minor inconvenience.  
Even if a two pass option was available, there still would be the need to set up the forward references
as are illustrated here, so the overall amount of work wouldn't be that much less. 
Floating figures are a huge feature of {X}fm, and the ability to accurately reference them by number, regardless
of where they are placed, and without having to manually maintain them, is just as big of a win. 


.**   capture variables that we are interested in having early during the second pass
.sv long_ex_fig
.ca expand extend setup.ca
	.dv long_ex_fig &long_ex_fig
	.dv short_ex_fig &short_ex_fig
.ca end
.qu



